I'll now write up the content from the image into a markdown document.

# Implementing the Product Pricing Service

In the company's e-commerce database, there is an OFFER table that reflects the final price(retail price) and the rate applied from a chain between certain dates.

Below is an example of a table with the most relevant fields:

```
markdownCopy code| OFFER_ID | BRAND_ID | START_DATE         | END_DATE           | PRICE_LIST | PARTNUMBER | PRIORITY | PRICE | CURR |
|----------|----------|--------------------|--------------------|------------|------------|----------|-------|------|
| 234      | 1        | '2020-06-14T00.00Z' | '2020-12-31T23.59Z' | 1          | '0001002'   | 0        | 35.50 | 'EUR' |
| 123      | 1        | '2020-06-14T15.00Z' | '2020-12-31T18.30Z' | 2          | '0001002'   | 1        | 32.45 | 'EUR' |
| 678      | 1        | '2020-06-15T00.00Z' | '2020-06-15T11.00Z' | 3          | '0001002'   | 1        | 30.50 | 'EUR' |
| 987      | 1        | '2020-06-15T16.00Z' | '2020-12-31T23.59Z' | 4          | '0001002'   | 1        | 38.95 | 'EUR' |
```

- **BRAND_ID**: Foreign key of the group chain ('1' = ZARA)
- **START_DATE, END_DATE**: Date range in which the indicated tariff price applies. On the END_DATE the price NO LONGER APPLIES, that is, it would apply until 1 second before the END_DATE. The dates are expressed in UTC time data format.
- **PRICE_LIST**: Identifier of the applicable price rate.
- **PARTNUMBER**: Product code identifier.
- **PRIORITY**: Disambiguator of price application. If two tariffs coincide in a date range, the one with the highest priority (highest numeric value) is applied.
- **PRICE**: Final sale price.
- **CURR**: ISO of the currency.

## Complete the proposed SpringBoot service so that all endpoints of the OfferController class are implemented.

### Endpoints

| Method | Endpoint                                         | Description                                 |
| :----: | ------------------------------------------------ | ------------------------------------------- |
|  POST  | `/offer`                                         | Creates a new offer                         |
| DELETE | `/offer`                                         | Delete all offers on the database           |
| DELETE | `/offer/{offerId}`                               | Delete a concrete offerId from the database |
|  GET   | `/offer`                                         | Get all the offers from the database        |
|  GET   | `/offer/{offerId}`                               | Get a concrete offerId from the database    |
|  GET   | `/brand/{brandId}/partnumber/{partnumber}/offer` | Get the timetable for a concrete product    |

Special attention to the 'timetable' operation for a specific product:

- This operation must "flatten" the intervals so that start-end tuples are not overlapped with the correct prices in each one.

- According to the test data, the result should be similar to the one indicated below.

  - From "2020-06-14T00:00:00Z" - until "2020-06-14T14:59:59Z" price: 35.50 

    From "2020-06-14T15:00:00Z" - until "2020-06-14T18:29:59Z" price: 25.45 

    From "2020-06-14T18:30:00Z" - until "2020-06-14T23:59:59Z" price: 35.50 

    From "2020-06-14T00:00:00Z" - until "2020-06-15T10:59:59Z" price: 30.50 

    From "2020-06-14T11:00:00Z" - until "2020-06-15T15:59:59Z" price: 35.50 

    From "2020-06-14T16:00:00Z" - until "2020-12-31T14:59:59Z" price: 38.95

- Use the POJO OfferByPartnumber to return the result.



## Recommendations

- Use an in-memory h2 database to store the results.
- Do not modify the `HttpJsonDynamicUnitTest`, the execution of the test will validate the results of the test.
- If the spring version is modified, it is not guaranteed that the new version is supported and may yield incorrect results.
- Take performance and scalability aspects into consideration.
- Document your decision in case of doubts or if several options are available.

It will be valued:

- Design and implementation of the service.
- Clean Code & SOLID principles.
- Unit Testing.
- Correct results of the test.